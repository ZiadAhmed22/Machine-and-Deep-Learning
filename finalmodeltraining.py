# -*- coding: utf-8 -*-
"""FinalModelTraining.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PxtVVfVYBefrzldFG9uKqmAZKhPzs5gs
"""

import pandas as pd
from sklearn.metrics import auc, accuracy_score, confusion_matrix, mean_squared_error
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
import xgboost as xgb

df = pd.read_excel('/content/Dataset_101_Decisions_BF_ML02-v2 (1).xlsx', 'All - 4col')
df.head()

#preprocess the data frame
df = df.dropna()
df['DecisionEncoded'] = df['Decision'].apply(lambda dec :  int(dec == 'Eligible'))

"""## New features"""

X=df.drop(['Decision'],axis=1)
Y=df['Decision']
x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.2,random_state=33)

# prepare counts for later
count_per_judge = df.groupby(['Judge'])['DecisionEncoded'].count()
count_per_court = df.groupby(['Court'])['DecisionEncoded'].count()

# df['Court'].value_counts().max()

# replacing the courts and judges with low records number with 'Other'
other_courts = list(count_per_court[count_per_court<7].index)
other_judges = list(count_per_judge[count_per_judge<7].index)

df.loc[df['Judge'].isin(other_judges),'Judge'] = 'Other'
df.loc[df['Court'].isin(other_courts),'Court'] = 'Other'

eligible_per_judge=x_train.groupby(['Judge'])['DecisionEncoded'].mean()
eligible_per_court=x_train.groupby(['Court'])['DecisionEncoded'].mean()

df['judge_conf'] = df['Judge'].apply(lambda x :count_per_judge[x]/34 if  x !='Other' else 0)
df['court_conf'] = df['Court'].apply(lambda x :count_per_court[x]/137 if  x !='Other' else 0)

df['eligible_per_judge']=df['Judge'].apply(lambda  x : eligible_per_judge[x] if x !='Other' else 0)
df['eligible_per_court']=df['Court'].apply(lambda  x : eligible_per_court[x] if x !='Other' else 0)

df.Court.describe()

# drop not used columns
df_processed=df.drop(['Decision','Representative Claim','Court','Judge'],axis=1)
df_processed.head()

import pickle
with open("/content/few_shot_model_preds.pkl", "rb") as fp:   # Unpickling
   few_shot = pickle.load(fp)

few_shot = [item.item() for item in few_shot]

df_processed['FewShot'] = few_shot[:-1]
df_processed.head()

X=df_processed.drop(['DecisionEncoded'],axis=1)
Y=df_processed['DecisionEncoded']
x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.2,random_state=33)

import xgboost as xgb

xgb1 = xgb.XGBClassifier(max_depth = 3, learning_rate=0.05,n_estimators=100,verposity=3,objective="binary:logistic", random_state=42)
model=xgb1.fit(x_train,y_train)

y_pred=model.predict(x_test)

accuracy_score(y_test, y_pred)

y_pred=model.predict(x_train)

accuracy_score(y_train, y_pred)

x_train[y_pred!=y_train][x_train['judge_conf']==0]['judge_conf'].count()/x_train['judge_conf'].count()

x_train[y_pred!=y_train][x_train['judge_conf']==0]['judge_conf'].count()/x_train[y_pred!=y_train]['judge_conf'].count()

x_train[y_pred!=y_train][x_train['court_conf']==0]['judge_conf'].count()/x_train[y_pred!=y_train]['judge_conf'].count()

y_train[y_pred!=y_train].mean()

x_train[y_pred!=y_train][x_train['judge_conf']!=0]

df['Representative Claim']

